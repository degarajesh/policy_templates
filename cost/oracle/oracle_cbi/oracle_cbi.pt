name "Oracle Cloud Common Bill Ingestion"
rs_pt_ver 20180301
type "policy"
short_description "Downloads cost reports from Oracle Cloud (OCI) and then uploads them to a Flexera CBI endpoint. See the [README](https://github.com/flexera-public/policy_templates/tree/master/cost/oracle/oracle_cbi) and [docs.flexera.com/flexera/EN/Automation](https://docs.flexera.com/flexera/EN/Automation/AutomationGS.htm) to learn more."
severity "low"
category "Cost"
default_frequency "15 minutes"
info(
  version: "2.0",
  provider: "Oracle"
)

###############################################################################
# Parameters
###############################################################################

parameter "param_period" do
  type "string"
  label "Billing Period"
  description "Month to process bills for in YYYY-MM format. Leave blank to do current month."
  default ""
end

parameter "param_cbi_endpoint" do
  type "string"
  label "Flexera CBI Endpoint"
  description "Name of the Flexera CBI endpoint to use. Ex: cbi-oi-oracle-oraclecloud"
end

parameter "param_region" do
  type "string"
  label "Oracle Cloud Region"
  description "Region of the Oracle Cloud Object Storage bucket containing the cost and usage reports. Ex: us-phoenix-1"
end

parameter "param_bucket" do
  type "string"
  label "Oracle Cloud Cost & Usage Bucket"
  description "OCID of the Oracle Cloud Object Storage bucket containing the Cost and Usage reports."
end

parameter "param_block_size" do
  type "number"
  label "Block Size"
  description "The number of files in a single block."
  default 20
  min_value 1
  max_value 20
end

###############################################################################
# Authentication
###############################################################################

credentials "auth_oracle" do
  schemes "oracle"
  label "Oracle"
  description "Select the Oracle Cloud (OCI) Credential from the list."
  tags "provider=oracle"
end

auth "auth_flexera", type: "rightscale"

###############################################################################
# Pagination
###############################################################################

pagination "pagination_oracle" do
  get_page_marker do
    body_path "nextStartWith"
  end
  set_page_marker do
    query "start"
  end
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_dates" do
  run_script $js_dates, $param_period
end

datasource "ds_existing_bill_uploads" do
  request do
    auth $auth_flexera
    verb "GET"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    header "allow_redirects", "False"
    query "billConnectId", $param_cbi_endpoint
    query "billingPeriod", val($ds_dates, 'period')
  end
end

datasource "ds_bill_upload_check" do
  run_script $js_bill_upload_check, $ds_existing_bill_uploads
end

datasource "ds_create_bill_upload" do
  iterate $ds_bill_upload_check
  request do
    auth $auth_flexera
    verb "POST"
    host rs_optima_host
    path join(["/optima/orgs/", rs_org_id, "/billUploads"])
    header "User-Agent", "RS Policies"
    header "allow_redirects", "False"
    body_field "billConnectId", $param_cbi_endpoint
    body_field "billingPeriod", val($ds_dates, 'period')
  end
  result do
    encoding "json"
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
    field "createdAt", jmes_path(response, "createdAt")
    field "files", jmes_path(response, "files")
    field "id", jmes_path(response, "id")
    field "status", jmes_path(response, "status")
    field "updatedAt", jmes_path(response, "updatedAt")
  end
end

datasource "ds_bill_upload" do
  run_script $js_bill_upload, $ds_existing_bill_uploads, $ds_create_bill_upload
end

datasource "ds_cost_object_list" do
  request do
    auth $auth_oracle
    pagination $pagination_oracle
    host join(["objectstorage.", $param_region, ".oraclecloud.com"])
    path join(["/n/bling/b/", $param_bucket, "/o/"])
    query "prefix", "reports/cost-csv/"
    query "fields", "name,etag,md5,timeCreated,timeModified"
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "json"
    collect jmes_path(response, "objects") do
      field "name", jmes_path(col_item, "name")
      field "etag", jmes_path(col_item, "etag")
      field "md5", jmes_path(col_item, "md5")
      field "timeCreated", jmes_path(col_item, "timeCreated")
      field "timeModified", jmes_path(col_item, "timeModified")
    end
  end
end

datasource "ds_cost_object_list_filtered" do
  run_script $js_cost_object_list_filtered, $ds_cost_object_list, $ds_dates, $ds_bill_upload, $param_block_size
end

datasource "ds_cost_objects" do
  iterate $ds_cost_object_list_filtered
  request do
    auth $auth_oracle
    verb "GET"
    host join(["objectstorage.", $param_region, ".oraclecloud.com"])
    path join(["/n/bling/b/", $param_bucket, "/o/", val(iter_item, "name")])
    header "User-Agent", "RS Policies"
  end
  result do
    encoding "text"
  end
end

datasource "ds_upload_file" do
  iterate $ds_cost_objects
  request do
    run_script $js_cbi_upload_file, iter_item, rs_org_id, rs_optima_host, $ds_bill_upload, $ds_dates
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "billUploadId", jmes_path(response, "billUploadId")
    field "createdAt", jmes_path(response, "createdAt")
    field "length", jmes_path(response, "length")
    field "md5", jmes_path(response, "md5")
    field "status", jmes_path(response, "status")
    field "updatedAt", jmes_path(response, "updatedAt")
  end
end

datasource "ds_commit_assess" do
  run_script $js_commit_assess, $ds_upload_file, $ds_cost_object_list, $ds_dates, $ds_bill_upload
end

datasource "ds_commit_bill_upload" do
  iterate $ds_commit_assess
  request do
    run_script $js_cbi_commit, rs_org_id, rs_optima_host, val(iter_item, 'id')
  end
  result do
    encoding "json"
    field "id", jmes_path(response, "id")
    field "billConnectId", jmes_path(response, "billConnectId")
    field "billingPeriod", jmes_path(response, "billingPeriod")
    field "createdAt", jmes_path(response, "createdAt")
    field "files", jmes_path(response, "files")
    field "status", jmes_path(response, "status")
    field "updatedAt", jmes_path(response, "updatedAt")
  end
end

###############################################################################
# Scripts
###############################################################################

script "js_dates", type: "javascript" do
  parameters "param_period"
  result "result"
  code <<-EOS
  result = {
    period: param_period
  }

  if (param_period == '') {
    day = new Date()
    day.setDate(day.getDate() - 1)
    day = day.toISOString().split('T')[0]
    month = day.split('-')[0] + '-' + day.split('-')[1]

    result = {
      period: month
    }
  }
EOS
end

script "js_bill_upload_check", type: "javascript" do
  parameters "ds_existing_bill_uploads"
  result "result"
  code <<-EOS
  incomplete_upload_found = false

  _.each(ds_existing_bill_uploads, function(upload) {
    if (upload['status'] == 'in-progress') {
      incomplete_upload_found = true
    }
  })

  if (incomplete_upload_found) {
    result = []
  } else {
    result = [1]
  }
EOS
end

script "js_bill_upload", type: "javascript" do
  parameters "ds_existing_bill_uploads", "ds_create_bill_upload"
  result "result"
  code <<-EOS
  result = null

  if (ds_create_bill_upload.length != 0) {
    result = ds_create_bill_upload[0]
  } else {
    _.each(ds_existing_bill_uploads, function(upload) {
      if (upload['status'] != 'complete') {
        result = upload
      }
    })
  }
EOS
end

script "js_cost_object_list_filtered", type: "javascript" do
  parameters "ds_cost_object_list", "ds_dates", "ds_bill_upload", "param_block_size"
  result "result"
  code <<-EOS
  result = []

  _.each(ds_cost_object_list, function(object) {
    object_month = object['timeModified'].split('T')[0]
    object_month = object_month.split('-')[0] + '-' + object_month.split('-')[1]

    if (object_month == ds_dates['period']) {
      result.push(object)
    }
  })

  if (ds_bill_upload['files'] != null && ds_bill_upload['files'] != undefined) {
    bill_upload_length = ds_bill_upload['files'].length
  } else {
    bill_upload_length = 0
  }

  if (bill_upload_length < result.length) {
    start_block = bill_upload_length
    end_block = bill_upload_length + param_block_size

    result = _.sortBy(result, "timeModified").slice(start_block, end_block)
  } else {
    result = []
  }
EOS
end

script "js_cbi_upload_file", type: "javascript" do
  parameters "oracle_cost_file", "org_id", "optima_host", "ds_bill_upload", "ds_dates"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  api_wait = 3
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: optima_host,
    path: ["/optima/orgs/", org_id, "/billUploads/", ds_bill_upload['id'], '/files/', now, '_', Math.random().toString().split('.')[1], '_', ds_dates['period'], '.csv.gz'].join(''),
    headers: {
      "User-Agent": "RS Policies",
    },
    body: oracle_cost_file
  }
EOS
end

script "js_commit_assess", type: "javascript" do
  parameters "ds_upload_file", "ds_cost_object_list", "ds_dates", "ds_bill_upload"
  result "result"
  code <<-EOS
  month_objects = []

  _.each(ds_cost_object_list, function(object) {
    object_month = object['timeModified'].split('T')[0]
    object_month = object_month.split('-')[0] + '-' + object_month.split('-')[1]

    if (object_month == ds_dates['period']) {
      month_objects.push(object)
    }
  })

  if (ds_bill_upload['files'] != null && ds_bill_upload['files'] != undefined) {
    bill_upload_length = ds_bill_upload['files'].length
  } else {
    bill_upload_length = 0
  }

  if (bill_upload_length == month_objects.length) {
    result = [ds_bill_upload]
  } else {
    result = []
  }
EOS
end

script "js_cbi_commit", type: "javascript" do
  parameters "org_id", "optima_host", "bill_upload_id"
  result "request"
  code <<-EOS
  // Slow down rate of requests to prevent throttling
  api_wait = 5
  var now = new Date().getTime()
  while(new Date().getTime() < now + (api_wait * 1000)) { /* Do nothing */ }

  var request = {
    auth: "auth_flexera",
    verb: "POST",
    host: optima_host,
    path: ['/optima/orgs/', org_id, '/billUploads/', bill_upload_id, '/operations'].join(''),
    headers: {
      "User-Agent": "RS Policies",
    },
    body_fields: {"operation":"commit"}
  }
EOS
end

###############################################################################
# Policy
###############################################################################

policy "pol_oracle_bill_ingestion" do
  validate $ds_commit_bill_upload do
    summary_template "OCI Cost Data Sent To CBI"
    detail_template "OCI Cost Data Sent To CBI"
    check eq(0, 0)
  end
end
