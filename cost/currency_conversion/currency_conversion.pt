name "Currency Conversion"
rs_pt_ver 20180301
type "policy"
short_description "Single Currency Conversion Policy - retrieve monthly avg rates from xe.com API."
long_description ""
severity "low"
default_frequency "monthly"
category "Cost"
info(
  version: "2.0",
  provider: "",
  service: "",
  policy_set: ""
)


###############################################################################
# Parameters
###############################################################################

parameter "param_email" do
  type "list"
  label "Email addresses"
end

parameter "param_cloud_provider" do
  type "string"
  label "Cloud Provider"
  description "Cloud provider costs that you want to apply currency conversion to"
  allowed_values ["AWS", "Azure", "Google Cloud"]
end

parameter "param_currency_from" do
  type "string"
  label "Currency From"
  description "Currency you want to convert from (based on ISO 4217 codes - e.g., 'USD' for US Dollar)"
end

parameter "param_currency_to" do
  type "string"
  label "Currency To"
  description "Currency you want to convert to (based on ISO 4217 codes) - e.g., 'EUR' for Euro)"
end

###############################################################################
# Authentication
###############################################################################

#AUTHENTICATION WITH XE.COM
credentials "xe_auth" do
  schemes "basic"
  label "XE_API"
  description "Select the xe_auth credential from the list."
  tags "provider=xe"
end

#AUTHENTICATION WITH CCO (EMEA)
credentials "auth_rs" do
  schemes "oauth2"
  label "Optima_API"
  description "Select FlexeraOne OAuth2 credentials"
  tags "provider=flexera"
end

###############################################################################
# Datasources & Scripts
###############################################################################

datasource "ds_date" do
  run_script $js_get_date
end

script "js_get_date", type: "javascript" do
  result "result"
  code <<-EOS
    var date = new Date()
    date.setMonth(date.getMonth() - 1)
    date=date.toISOString().split("T")
    var yearmonth = date[0].split("-")[0] + "-" + date[0].split("-")[1]
    var result = { "yearmonth": yearmonth }
  EOS
end

#GET XE.COM DAILY RATE
datasource "ds_xe_monthly_average" do
  request do
    auth $xe_auth
    host "xecdapi.xe.com"
    path "/v1/monthly_average"
    query "from", $param_currency_from
    query "to", $param_currency_to
    query "amount", "1"
    query "year", first(split(val($ds_date,"yearmonth"),"-"))
    query "month", last(split(val($ds_date,"yearmonth"),"-"))
  end
end

#GET CURRENT ADJUSTMENTS
datasource "ds_current_adjustments" do
  request do
    auth $auth_rs
    host rs_optima_host
    path join(["/bill-analysis/orgs/", rs_org_id, "/adjustments/"])
    header "User-Agent", "RS Policies"
  end
end


#CREATE UPDATED ADJUSTMENTS
datasource "ds_updated_adjustments" do
  run_script $js_update_adjustments, $ds_xe_monthly_average, $ds_current_adjustments, $ds_date, $param_cloud_provider, $param_currency_from, $param_currency_to
end

script "js_update_adjustments", type: "javascript" do
  parameters "xe_monthly_average", "ds_adjustments", "ds_date", "param_cloud_provider", "param_currency_from", "param_currency_to"
  result "new_adjustment_table"
  code <<-EOS
    //Get conversion rate (monthly average)
    var conversion_rate = xe_monthly_average.to[param_currency_to][0].monthlyAverage

    //Cloud provider
    if( param_cloud_provider == "Google Cloud" ){ param_cloud_provider = "GCP" }
    
    //Create currency coversion adjustment rule
    currency_conversion_rule = {
      "name": "Currency Conversion",
      "rules": [
        {
          "condition": {
            "type": "or",
            "expressions": [
              {
                "type": "dimension_equals",
                "dimension": "vendor",
                "value": param_cloud_provider
              }
            ]
          },
          "cost_multiplier": conversion_rate - 1,
          "label": param_currency_from + " to " + param_currency_to
        }
      ]
    }
    
    //Get current adjustment list (as this is the one that needs to be modified) if it exists
    var current_effective_at_month = ds_date.yearmonth
    var dated_adjustment_lists = ds_adjustments.dated_adjustment_lists
    
    var current_adjustment_list = _.find(dated_adjustment_lists, function(adj_list){
      return adj_list.effective_at == current_effective_at_month
    })

    var new_adjustment_list = {}

    //If adjustment list does not exist, create a new adjustment object
    if( current_adjustment_list == undefined ){
      new_adjustment_list = {
        "adjustment_list": [ currency_conversion_rule ],
        "effective_at": current_effective_at_month
      }
    }
    //If adjustment list already exists, edit the existing adjustment object
    else {
      var adjustment_list = [] 
      _.each(current_adjustment_list.adjustment_list, function(list){
        adjustment_list.push( list )
      })
      adjustment_list.push( currency_conversion_rule )
      new_adjustment_list = { 
        "adjustment_list": adjustment_list,
        "effective_at": current_adjustment_list.effective_at,
        "updated_at": current_adjustment_list.updated_at
       }
    }
    //Will want added conditions for checking whether currency conversion rule already exists for given month


    //Reject adjustments for current month (if exists) from existing adjustment lists object
    var new_dated_adjustment_list = { "dated_adjustment_lists": [] }
    new_dated_adjustment_list.dated_adjustment_lists = _.reject(ds_adjustments.dated_adjustment_lists, function(adj_list){ return adj_list.effective_at == current_effective_at_month })
    //console.log(new_dated_adjustment_list)
    
    //And replace with new adjustments for current month
    new_dated_adjustment_list.dated_adjustment_lists.push( new_adjustment_list )
    //console.log(new_dated_adjustment_list)
    
    result = new_dated_adjustment_list   
  EOS
end

=begin
datasource "ds_updated_adjustments_payload" do
  run_script $js_update_adjustments_payload, $ds_updated_adjustments
end

script "js_update_adjustments_payload", type: "javascript" do
  parameters "ds_updated_adjustments"
  result "result"
  code <<-EOS
  result = [JSON.stringify(ds_updated_adjustments)]
EOS
end

datasource "ds_put_rules" do
  iterate $ds_updated_adjustments_payload
  request do
    auth $auth_rs
    host $param_api_endpoint
    verb "PUT"
    path join(["/bill-analysis/orgs/", $param_org_id, "/adjustments/"])
    header "content-type", "application/json"
    header "User-Agent", "RS Policies"
    body iter_item
  end
end

=end

###############################################################################
# POLICY
###############################################################################

policy "policy_currency_conversion_daily_rates" do
  validate $ds_updated_adjustments do
  #validate $ds_put_rules do
    summary_template "Currency Conversion Daily Rates"
    detail_template "Adjustments Uploaded"
    check eq(0,1)
  end
end
